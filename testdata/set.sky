# Tests of Skylark 'set'

# Sets are not (yet) a standard part of Skylark, so the features
# tested in this file must be enabled in the application by setting
# resolve.AllowSet.  (All sets are created by calls to the 'set'
# built-in or derived from operations on existing sets.)
# The semantics are subject to change as the spec evolves.

# TODO(adonovan): support set mutation:
# - del set[k]
# - set.remove
# - set.update
# - set.clear
# - set += iterable, perhaps?
# Test iterator invalidation.

load("assert.sky", "assert")

# literals
# Parser does not currently support {1, 2, 3}.
# TODO(adonovan): add test to syntax/testdata/errors.sky.

# set comprehensions
# Parser does not currently support {x for x in y}.
# See syntax/testdata/errors.sky.

# set constructor
assert.eq(type(set()), "set")
assert.eq(list(set()), [])
assert.eq(type(set([1, 3, 2, 3])), "set")
assert.eq(list(set([1, 3, 2, 3])), [1, 3, 2])
assert.eq(type(set("hello".split_bytes())), "set")
assert.eq(list(set("hello".split_bytes())), ["h", "e", "l", "o"])
assert.fails(lambda: set(1), "got int, want iterable")
assert.fails(lambda: set(1, 2, 3), "got 3 arguments")

# truth
assert.true(not set())
assert.true(set([False]))
assert.true(set([1, 2, 3]))

x = set([1, 2, 3])
y = set([3, 4, 5])

# set + any is not defined
assert.fails(lambda: x + y, "unknown.*: set \+ set")

# union, set | iterable
assert.eq(list(set("a".split_bytes()) | set("b".split_bytes())), ["a", "b"])
assert.eq(list(set("ab".split_bytes()) | set("bc".split_bytes())), ["a", "b", "c"])
assert.eq(list(set("ab".split_bytes()) | "bc".split_bytes()), ["a", "b", "c"])
assert.eq(type(x | y), "set")
assert.eq(list(x | y), [1, 2, 3, 4, 5])
assert.eq(list(x | [5, 1]), [1, 2, 3, 5])
assert.eq(list(x | (6, 5, 4)), [1, 2, 3, 6, 5, 4])
assert.fails(lambda: x | [1, 2, {}], "unhashable type: dict")

# intersection, set & set
assert.eq(list(set("a".split_bytes()) & set("b".split_bytes())), [])
assert.eq(list(set("ab".split_bytes()) & set("bc".split_bytes())), ["b"])

# set.union
assert.eq(list(x.union(y)), [1, 2, 3, 4, 5])

# len
assert.eq(len(x), 3)
assert.eq(len(y), 3)
assert.eq(len(x | y), 5)

# str
# TODO(adonovan): make output deterministic when len > 1?
assert.eq(str(set([1])), "set([1])")

# comparison
assert.eq(x, x)
assert.eq(y, y)
assert.true(x != y)
assert.eq(set([1, 2, 3]), set([3, 2, 1]))
assert.fails(lambda: x < y, "set < set not implemented")

# iteration
assert.true(type([elem for elem in x]), "list")
assert.true(list([elem for elem in x]), [1, 2, 3])
def iter():
  list = []
  for elem in x:
    list.append(elem)
  return list
assert.eq(iter(), [1, 2, 3])

# sets are not indexable
assert.fails(lambda: x[0], "unhandled.*operation")
